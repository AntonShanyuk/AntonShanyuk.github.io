{"version":3,"sources":["Label/Label.tsx","Autocomplete/Autocomplete.tsx","AutocompleteContainer/AutocompleteContainer.tsx","reportWebVitals.ts","index.tsx"],"names":["Label","props","name","color","style","backgroundColor","className","effects","input","issues","selectedIssue","setSelectedIssue","e","target","isDownKey","key","isUpKey","isEnter","window","open","html_url","length","currentIndex","indexOf","preventDefault","hooks","React","useState","visible","setVisible","hide","useCallback","show","inputRef","useRef","useEffect","listener","current","document","addEventListener","removeEventListener","Autocomplete","onInput","items","loading","error","type","onFocus","onBlur","ref","placeholder","map","item","classnames","selected","href","rel","title","labels","label","id","query","queryPararam","encodeURIComponent","fetch","response","json","ok","setIssues","setLoading","setError","then","catch","message","setQuery","useDebouncedCallback","value","AutocompleteContainer","callback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c2c727f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { IssueLabel } from \"../types/issues\";\r\nimport \"./Label.css\";\r\n\r\nexport const Label = (props: IssueLabel) => {\r\n    const { name, color } = props;\r\n    return (\r\n        <span\r\n            style={{backgroundColor: `#${color}`}}\r\n            className=\"label\"\r\n        >\r\n            {name}\r\n        </span>\r\n    );\r\n};\r\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { Label } from \"../Label/Label\";\r\nimport { Issue } from \"../types/issues\";\r\nimport \"./Autocomplete.css\";\r\n\r\ntype Props = {\r\n    onInput: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    items: Issue[] | undefined;\r\n    loading: boolean;\r\n    error: string | null;\r\n};\r\n\r\nexport const effects = {\r\n    keydownListener: (\r\n        input: HTMLInputElement | null,\r\n        issues: Issue[] | undefined,\r\n        selectedIssue: Issue | null,\r\n        setSelectedIssue: (issue: Issue) => void,\r\n    ) => (e: KeyboardEvent) => {\r\n        if (e.target !== input) {\r\n            return;\r\n        }\r\n        const isDownKey = e.key === \"ArrowDown\";\r\n        const isUpKey = e.key === \"ArrowUp\";\r\n        const isEnter = e.key === \"Enter\";\r\n\r\n        if (selectedIssue && isEnter) {\r\n            window.open(selectedIssue.html_url, \"_blank\");\r\n            return;\r\n        }\r\n\r\n        if (issues && issues.length && (isDownKey || isUpKey)) {\r\n            let currentIndex = selectedIssue ? issues.indexOf(selectedIssue) : 0;\r\n            \r\n            if (isDownKey && (!selectedIssue || currentIndex === issues.length - 1)) {\r\n                currentIndex = 0;\r\n            } else if (isDownKey) {\r\n                currentIndex++;\r\n            } else if (isUpKey && (!selectedIssue || currentIndex === 0)) {\r\n                currentIndex = issues.length - 1;\r\n            } else if (isUpKey) {\r\n                currentIndex --;\r\n            }\r\n\r\n            setSelectedIssue(issues[currentIndex]);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n};\r\n\r\nexport const hooks = {\r\n    useDropdownState() {\r\n        const [visible, setVisible] = React.useState(false);\r\n        const hide = useCallback(() => {\r\n            setVisible(false);\r\n        }, [setVisible]);\r\n        const show = useCallback(() => {\r\n            setVisible(true);\r\n        }, [setVisible]);\r\n\r\n        return { visible, show, hide };\r\n    },\r\n    useSelectedIssue(issues: Issue[] | undefined) {\r\n        const inputRef = useRef<HTMLInputElement>(null);\r\n        const [selectedIssue, setSelectedIssue] = useState(issues?.length ? issues[0] : null);\r\n        useEffect(() => {\r\n            const listener = effects.keydownListener(inputRef.current, issues, selectedIssue, setSelectedIssue);\r\n            \r\n            document.addEventListener(\"keydown\", listener);\r\n\r\n            return () => document.removeEventListener(\"keydown\", listener);\r\n        }, [issues, selectedIssue, setSelectedIssue, inputRef]);\r\n\r\n        return { inputRef, selectedIssue };\r\n    }\r\n};\r\n\r\n  \r\n\r\nexport const Autocomplete = (props: Props) => {\r\n    const { onInput, items, loading, error } = props;\r\n\r\n    const { visible, show, hide } = hooks.useDropdownState();\r\n    const { selectedIssue, inputRef } = hooks.useSelectedIssue(items);\r\n\r\n    return (\r\n        <div className=\"autocomplete\">\r\n            <input\r\n                type=\"text\"\r\n                onInput={onInput}\r\n                onFocus={show}\r\n                onBlur={hide}\r\n                ref={inputRef}\r\n                className=\"input\"\r\n                placeholder=\"Search issues\"\r\n            />\r\n            {error && visible && (\r\n                <div className=\"error\">Error: <span>{error}</span></div>\r\n            )}\r\n            {loading && visible && (\r\n                <div className=\"loading\">Loading...</div>\r\n            )}\r\n            {items && !!items.length && !loading && !error && visible && (\r\n                <div className=\"dropdown\">\r\n                    {items.map(item => (\r\n                        <>\r\n                            <div\r\n                                key={item.id}\r\n                                className={classnames(\"issue\", {\r\n                                    selected: item === selectedIssue\r\n                                })}\r\n                            >\r\n                                <a\r\n                                    className=\"issueTitle\"\r\n                                    href={item.html_url}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noreferrer\"\r\n                                >\r\n                                    {item.title}\r\n                                </a>\r\n                                {item.labels.map(label => (\r\n                                    <span className=\"issueLabel\" key={label.id}>\r\n                                        <Label {...label} />\r\n                                    </span>\r\n                                ))}\r\n                            </div>\r\n                        </>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useDebouncedCallback } from \"use-debounce\";\r\nimport { Autocomplete } from \"../Autocomplete/Autocomplete\";\r\nimport { LoadIssuesResponse } from \"../types/issues\";\r\n\r\nexport const effects = {\r\n    async loadIssues(query: string): Promise<LoadIssuesResponse> {\r\n        const queryPararam = encodeURIComponent(`\"${query}\"`);\r\n        const response = await fetch(\r\n            `https://api.github.com/search/issues?q=${queryPararam}+repo:facebook/react&per_page=10`\r\n        );\r\n\r\n        const json = await response.json();\r\n        if (!response.ok) {\r\n            throw json;\r\n        }\r\n\r\n        return json;\r\n    }\r\n};\r\n\r\nexport const hooks = {\r\n    useLoadIssues(query: string | null) {\r\n        const [issues, setIssues] = React.useState<LoadIssuesResponse | null>(null);\r\n        const [loading, setLoading] = React.useState(false);\r\n        const [error, setError] = React.useState<string | null>(null);\r\n\r\n        React.useEffect(() => {\r\n            if (query !== null) {\r\n                setLoading(true);\r\n                setError(null);\r\n                effects.loadIssues(query).then(issues => {\r\n                    setIssues(issues);\r\n                    setLoading(false);\r\n                    setError(null);\r\n                }).catch((e: Error) => {\r\n                    setLoading(false);\r\n                    setError(e.message);\r\n                });\r\n            }\r\n        }, [query]);\r\n\r\n        return { issues, loading, error };\r\n    },\r\n    useOnInput() {\r\n        const [query, setQuery] = React.useState<string | null>(null);\r\n\r\n        const onInput = useDebouncedCallback(\r\n            React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n                setQuery(e.target.value);\r\n            }, []),\r\n            300,\r\n        );\r\n\r\n        return { query, onInput };\r\n    }\r\n};\r\n\r\nexport function AutocompleteContainer() {\r\n    const { query, onInput } = hooks.useOnInput();\r\n    const { issues, loading, error } = hooks.useLoadIssues(query);\r\n\r\n    return (\r\n        <Autocomplete\r\n            onInput={onInput.callback}\r\n            items={issues?.items}\r\n            loading={loading}\r\n            error={error}\r\n        />\r\n    );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { AutocompleteContainer } from './AutocompleteContainer/AutocompleteContainer';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <div className=\"app\">\n            <div className=\"center\">\n                <AutocompleteContainer />\n            </div>\n            <div>\n            React is a JavaScript library for building user interfaces.\n\nDeclarative: React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.\nComponent-Based: Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.\nLearn Once, Write Anywhere: We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using React Native.\n            </div>\n        </div>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}